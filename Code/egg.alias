embed
<drac2>

def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def multiple_match_determine(search_result: list[str], input_value: str) -> str|bool:
    """
    Determines if there is an exact match in search results
    
    Args:
        search_result (list[str]): List of search results
        input_value (str): Input value to match

    Returns:
        str|bool: The exact match if found, otherwise False
    """

    for match in search_result:
        if match.lower() == input_value.lower():
            return match

    return False


def main(input_list: list[str]) -> tuple(str, str, str, str):
    """
    Main function to handle egg hatching process.

    Args:
        input_list (list[str]): List of input strings

    Return:
        str: title
        str: Main body paragraph
        str: Color hex code
        str: Image URL
    """

    # To ensure that a character is selected
    if not (ch := character()):
        return "You Have Been Sneak Attacked by an Error", "You must have a character selected", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

    # Load SVAR dictionary
    if (svar_dict := get_svar("egg_SVAR")):
        svar_dict = load_json(svar_dict)

    # If SVAR doesn't exist (for some reason), load empty dictionary
    else:
        svar_dict = {}

    # Ensures that the CVAR exists
    if not (cvar_dict := ch.get_cvar("egg_CVAR")):
        return "You Have Been Sneak Attacked by an Error", "You do not have any eggs", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

    # Load CVAR dictionary
    cvar_dict = load_json(cvar_dict)

    # If there are no eggs in the CVAR dictionary
    if len(cvar_dict.keys()) < 1:
        return "You Have Been Sneak Attacked by an Error", "You do not have any eggs", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

    # To make sure there is at least one input
    if len(input_list) < 1 and len(cvar_dict.keys()) > 1:
        return "You Have Been Sneak Attacked by an Error", "Expected name of egg", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

    # If there are no inputs, but there is only one egg... set egg as input
    if len(input_list) < 1 and len(cvar_dict.keys()) == 1:
        input_list.append(list(cvar_dict.keys())[0])

    if len(input_list) > 0:
        if input_list[0].lower() in ["-b", "adv", "eadv", "dis", "reliable", "-i"]:

            if len(cvar_dict.keys()) == 1:
                input_list.insert(0, list(cvar_dict.keys())[0])
            
            else:
                return "You Have Been Sneak Attacked by an Error", "Expected name of egg", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

    # If it finds at least one match
    if (search_results := search_list(input_list[0], cvar_dict.keys())):

        # If it finds exactly one egg
        if len(search_results) == 1:
            input_list[0] = search_results[0]

        # If it finds more than one egg
        else:

            # If it finds an exact match
            if (search_results2 := multiple_match_determine(search_result, input_list[0])):
                input_list[0] = search_results2

            # If it does not find an exact match
            else:
                search_results.insert(0, "**Multiple Matches Found:**")

                return "You Have Been Sneak Attacked by an Error", "\n".join(search_results), "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"
    
    # If it finds no matches
    else:
        return "You Have Been Sneak Attacked by an Error", f"Egg name not found ({input_list[0]})", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

    # Grab current time and egg image
    current_time = int(time())
    egg_image = cvar_dict[input_list[0]]["image"]

    # If egg is time based
    if cvar_dict[input_list[0]]["mode"] == "time":

        # If egg has hatched
        if current_time >= cvar_dict[input_list[0]]["mode_settings"]["end_time"]:
            return f"{name} Checks On {input_list[0]}", f"Egg has hatched! Please remove egg via\n`{ctx.prefix}egg remove {input_list[0]}`", "", egg_image

        # If the egg has not hatched
        else:
            return f"{name} Checks On {input_list[0]}", f"Egg has not hatched\n\nHatch time: <t:{cvar_dict[input_list[0]]['mode_settings']['end_time']}:f>", "", egg_image

    # If the egg is check based
    else:

        # Parse arguments (dis/adv/eadv, -b, reliable, -i)
        arg_parsed = argparse(" ".join(input_list))

        adv = arg_parsed.adv(eadv=True)
        bonus = arg_parsed.last("b", default=0)
        reliable = arg_parsed.last("reliable", default=False)
        ignore = arg_parsed.last("i", default=False)

        # Calculate time after cooldown
        cooldown_off = cvar_dict[input_list[0]]["mode_settings"]["cooldown"] + cvar_dict[input_list[0]]["mode_settings"]["time"]

        # If cooldown has not passed and not -i
        if current_time < cooldown_off and not ignore:
            return "You Have Been Sneak Attacked by an Error", f"Egg check is on cooldown until <t:{cooldown_off}:f>", "#CF142B", egg_image

        # If cooldown has passed or -i
        else:
            try:
                counter_obj = ch.cc(f"{input_list[0]} Egg Counter")

            except:
                return "You Have Been Sneak Attacked by an Error", f"Counter does not exist. Please run `{ctx.prefix}egg remove {input_list[0]}", "#CF142B", egg_image

            # If value = max on CC
            if counter_obj.value == counter_obj.max:
                return "You Have Been Sneak Attacked by an Error", f"You have already reached the necessary number of successes", "#CF142B", egg_image

            # Store current time
            cvar_dict[input_list[0]]["mode_settings"]["time"] = current_time

            # Find skill mod from skills
            for (skill_name, skill) in ch.skills:
                if skill_name == cvar_dict[input_list[0]]["mode_settings"]["skill"]:
                    skill_mod = skill.value

            # Verify skill mod was found
            try:
                skill_mod

            # If skill mod was not found (for some reason or another)
            except:
                return "You Have Been Sneak Attacked by an Error", f"Egg CVAR is corrupted with an invalid skill, please remove egg from CVAR using `{ctx.prefix}egg remove '{input_list[0]}'`", "#CF142B", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Egg-Hatchery/refs/heads/main/Data/images/broken.png"

        # If bonus is not 0
        if bonus != 0:

            # Try to make bonus a number
            try:
                bonus = int(bonus)

            # If bonus is not a number
            except:
                bonus = 0

        # If reliable talent is allowed in SVAR settings
        if "reliable_talent" in svar_dict.keys():

            # If rogue level is at least 11 (2014 rules. Use 'reliable' to bypass in-case using 2024 rules)
            if ch.levels.get("rogue") >= 11:
                reliable_talent = True

            # If rogue level is not at least 11
            else:
                reliable_talent = False

        # If reliable talent is not allowed in SVAR settings
        else:
            reliable_talent = False

        # Create title
        skill_dict = {
            "arcana": "Arcana",
            "acrobatics": "Acrobatics",
            "animalHandling": "Animal Handling",
            "athletics": "Athletics",
            "deception": "Deception",
            "history": "History",
            "insight": "Insight",
            "intimidation": "Intimidation",
            "investigation": "Investigation",
            "medicine": "Medicine",
            "nature": "Nature",
            "perception": "Perception",
            "performance": "Performance",
            "persuasion": "Persuasion",
            "religion": "Religion",
            "sleightOfHand": "Sleight of Hand",
            "stealth": "Stealth",
            "survival": "Survival"
        }

        # Match checking advantage level, halfling, and reliable talent
        match f"{adv}, {'halfling' in ch.race.lower()}, {reliable_talent or reliable}":

            # Double advantage, halfling, and reliable talent
            case "2, True, True":
                roll_str = "3d20ro1kh1mi10"

            # Double advantage and halfling
            case "2, True, False":
                roll_str = "3d20ro1kh1"

            # Double advantage and reliable talent
            case "2, False, True":
                roll_str = "3d20kh1mi10"

            # Double advantage
            case "2, False, False":
                roll_str = "3d20kh1"

            # Advantage, halfling, and reliable talent
            case "1, True, True":
                roll_str = "2d20ro1kh1mi10"
            
            # Advantage and halfling
            case "1, True, False":
                roll_str = "2d20ro1kh1"

            # Advantage and reliable talent
            case "1, False, True":
                roll_str = "2d20kh1mi10"

            # Advantage
            case "1, False, False":
                roll_str = "2d20kh1"

            # No advantage, halfling, and reliable talent
            case "0, True, True":
                roll_str = "1d20ro1mi10"

            # No advantage and halfling
            case "0, True, False":
                roll_str = "1d20ro1"

            # No advantage and reliable talent
            case "0, False, True":
                roll_str = "1d20mi10"

            # No advantage
            case "0, False, False":
                roll_str = "1d20"

            # Disadvantage, halfling, and reliable talent
            case "-1, True, True":
                roll_str = "2d20ro1kl1mi10"

            # Disadvantage and halfling
            case "-1, True, False":
                roll_str = "2d20ro1kl1"

            # Disadvantage and reliable talent
            case "-1, False, True":
                roll_str = "2d20kl1mi10"

            # Disadvantage
            case "-1, False, False":
                roll_str = "2d20kl1"

            case _:
                err(f"Unexpected case (Give this to ShadowsStride): {adv}, {'halfling' in ch.race.lower()}, {reliable_talent or reliable}")

            
        # Match adding roll string bonus and skill mod
        match bonus != 0, skill_mod != 0:

            # Both bonus and skill mod are non-zero
            case True, True:
                roll_str += f"+{bonus}[bonus]+{skill_mod}[{skill_dict[cvar_dict[input_list[0]]['mode_settings']['skill']]}]"

            # Only skill mod is non-zero
            case False, True:
                roll_str += f"+{skill_mod}[{skill_dict[cvar_dict[input_list[0]]['mode_settings']['skill']]}]"

            # Only bonus is non-zero
            case True, False:
                roll_str += f"+{bonus}[bonus]"

            # Both bonus and skill mod are zero
            case _:
                pass

        # Make dice roll
        vroll_obj = vroll(roll_str)

        # Grab full string and total
        roll_string = vroll_obj.full
        roll_total = vroll_obj.total

        # Create title
        skill_dict = {
            "arcana": "Arcana",
            "acrobatics": "Acrobatics",
            "animalHandling": "Animal Handling",
            "athletics": "Athletics",
            "deception": "Deception",
            "history": "History",
            "insight": "Insight",
            "intimidation": "Intimidation",
            "investigation": "Investigation",
            "medicine": "Medicine",
            "nature": "Nature",
            "perception": "Perception",
            "performance": "Performance",
            "persuasion": "Persuasion",
            "religion": "Religion",
            "sleightOfHand": "Sleight of Hand",
            "stealth": "Stealth",
            "survival": "Survival"
        }

        
        title = f"{name} Performs a(n) {skill_dict[cvar_dict[input_list[0]]['mode_settings']['skill']]} Check For {input_list[0]}"

        # If it meets/beats DC
        if roll_total >= cvar_dict[input_list[0]]["mode_settings"]["dc"]:
            counter_obj.mod(1)
            success = True

        # If it doesn't meet/beat DC
        else:
            success = False

        # Start output result string
        result_string = [
            f"**DC:** {cvar_dict[input_list[0]]['mode_settings']['dc']}",
            roll_string,
            "",
            ch.cc_str(f"{input_list[0]} Egg Counter")
        ]

        # If visual counter is not the same as the #/# counter
        if f"{counter_obj.value}/{counter_obj.max}" != ch.cc_str(f"{input_list[0]} Egg Counter"):
            result_string.append(f"{counter_obj.value}/{counter_obj.max}")

        # If successfully, add (+1) to last string
        if success:
            result_string[-1] += f" (+1)"

        # If they are finished
        if counter_obj.value == counter_obj.max:
            result_string.append(f"You have successfully hatched your egg! Run `{ctx.prefix}egg remove '{input_list[0]}'`")

        # If they are not finished, add next session time
        else:
            result_string.append(f"\nNext Session: <t:{current_time + cvar_dict[input_list[0]]['mode_settings']['cooldown']}:f>")

        # If cooldown bypass used
        if ignore:
            result_string.append("`COOLDOWN BYPASSED`")

        # Update CVAR
        ch.set_cvar("egg_CVAR", dump_json(cvar_dict))

        return title, "\n".join(result_string), "", egg_image


# Main program function
title, f, color, thumb = main(&ARGS&)

# String usage because Avrae is dumb when it comes to dashes and angle brackets
l = "<"
d = "-"


</drac2>
-title "{{title}}"
-f "{{f}}"
-color "{{color}}"
-thumb "{{thumb}}"
-footer "{{ctx.prefix}}egg [egg_name] {{l}}{{d}}b> {{l}}adv/dis> | 1/28/25 | ShadowsStride"